#include <NewPing.h>

#define MIN 0
#define MAX 40

#define m1 2
#define m2 3
#define m3 4
#define m4 7
#define ENA 5
#define ENB 6 

//FRONT IR SESNOR FOR DETECTING BLACK & WHITE
#define IR_sensor_left A0 
#define IR_sensor_right A1 

#define IR_sensor_back A2

// ULTRA SONIC SENSOR
int trigPin1 = 8;  
int echoPin1 = 9;
int dist1 = 0;

int distance = 50;

NewPing sonar1(trigPin1, echoPin1, distance);

void forward() {
  digitalWrite(m1, HIGH);
  digitalWrite(m2, LOW);
  digitalWrite(m3, HIGH);
  digitalWrite(m4, LOW);
  analogWrite(ENA, 100);
  analogWrite(ENB, 100);
}

void attack() {
  digitalWrite(m1, HIGH);
  digitalWrite(m2, LOW);
  digitalWrite(m3, HIGH);
  digitalWrite(m4, LOW);
  analogWrite(ENA, 255);
  analogWrite(ENB, 255);
}

void rotate_Right() {
  digitalWrite(m1, LOW);
  digitalWrite(m2, HIGH);
  digitalWrite(m3, HIGH);
  digitalWrite(m4, LOW);
  analogWrite(ENA, 65);
  analogWrite(ENB, 65);
}

void rotate_Left() {
  digitalWrite(m1, HIGH);
  digitalWrite(m2, LOW);
  digitalWrite(m3, LOW);
  digitalWrite(m4, HIGH);
  analogWrite(ENA, 60);
  analogWrite(ENB, 60);
}

void atras() {
  digitalWrite(m1, LOW);
  digitalWrite(m2, HIGH);
  digitalWrite(m3, LOW);
  digitalWrite(m4, HIGH);
  analogWrite(ENA, 150);
  analogWrite(ENB, 150);
}

void Stop() {
  digitalWrite(m1, LOW);
  digitalWrite(m2, LOW);
  digitalWrite(m3, LOW);
  digitalWrite(m4, LOW);
}
void atras_attack() {
  digitalWrite(m1, LOW);
  digitalWrite(m2, HIGH);
  digitalWrite(m3, LOW);
  digitalWrite(m4, HIGH);
  analogWrite(ENA, 255);
  analogWrite(ENB, 255);
}



void setup() {
  pinMode(IR_sensor_left, INPUT);
  pinMode(IR_sensor_right, INPUT);
  pinMode(m1, OUTPUT);
  pinMode(m2, OUTPUT);
  pinMode(m3, OUTPUT);
  pinMode(m4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IR_sensor_back, INPUT);
  Serial.begin(9600);
  delay(5000);
}

int Tic = 0;


void loop() {
  int left_IR = analogRead(IR_sensor_left);
  int right_IR = analogRead(IR_sensor_right);
int back_IR = digitalRead(IR_sensor_back);

  
  dist1 = sonar1.ping_cm();

  
  if (dist1 > MIN && dist1 < MAX) {
    attack();
    delay(400);
  } 
  else if (left_IR  < 500)  // adjust the threshold value based on your sensor readings &  > 500 for black lines
 
  {
    Stop();
    delay (50);
   atras();
   delay(500);
    rotate_Right();
    delay (500);
  } 
  else if (right_IR  < 500)  // adjust the threshold value based on your sensor readings & > 500 for black lines
  {
    Stop();
    delay (50);
    atras();
   delay(500);
    rotate_Left();
    delay (500);
 
  }
  else if(back_IR == HIGH){

  atras_attack();
     delay(400);

  }  else{
    forward();
    
  }
}
